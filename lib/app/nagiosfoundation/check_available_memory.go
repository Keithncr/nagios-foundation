package nagiosfoundation

import (
	"errors"
	"flag"
	"fmt"
	"os"

	"github.com/jkerry/nagiosfoundation/lib/pkg/memory"
	"github.com/jkerry/nagiosfoundation/lib/pkg/nagiosformatters"
)

// CheckAvailableMemoryWithHandler determines the percentage of free memory
// remaining then emits a critical response if it's below
// flag -critical, a warning response if below flag -warning,
// and good response otherwise.
func CheckAvailableMemoryWithHandler(memoryHandler func() (float64, error)) (string, int) {
	const checkName = "CheckAvailableMemoryMbytes"
	var warning = flag.Float64("warning", 85, "the memory threshold to issue a warning alert")
	var critical = flag.Float64("critical", 95, "the memory threshold to issue a critical alert")
	// Metric name not currently used
	var metricName = flag.String("metric_name", "available_memory_mbs", "the name of the metric generated by this check")
	flag.Parse()
	SetDefaultGlogStderr()

	var msg string
	var retcode int
	var freememory float64
	var err error

	if memoryHandler == nil {
		err = errors.New("No GetFreeMemory() service")
	} else {
		freememory, err = memoryHandler()
	}

	if err == nil {
		msg, retcode = nagiosformatters.LesserFormatNagiosCheck(checkName, freememory, *warning, *critical, *metricName)
	} else {
		msg = fmt.Sprintf("%s CRITICAL - %s", checkName, err)
		retcode = 2
	}

	return msg, retcode
}

// CheckAvailableMemory executes CheckAvailableMemoryWithHandler(),
// passing it the OS constranted GetFreeMemory() function, prints
// the returned message and exits with the returned exit code.
//
// Returns are those of CheckAvailableMemoryWithHandler()
func CheckAvailableMemory() {
	msg, retval := CheckAvailableMemoryWithHandler(memory.GetFreeMemory)

	fmt.Println(msg)
	os.Exit(retval)

}

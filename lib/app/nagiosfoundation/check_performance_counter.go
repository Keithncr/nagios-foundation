package nagiosfoundation

import (
	"errors"
	"flag"
	"fmt"

	"github.com/ncr-devops-platform/nagiosfoundation/lib/pkg/nagiosformatters"
	"github.com/ncr-devops-platform/nagiosfoundation/lib/pkg/perfcounters"
)

// CheckPerformanceCounterWithHandler fetches a performance counter
// specified with the -counter_name flag. It then performs checks against
// the value based on the threshold test specified along with the
// warning and critical thresholds.
//
// Returns are a message stating the results of the check and a return
// value from the check.
func CheckPerformanceCounterWithHandler(perfCounterHandler func(string, int, int) (perfcounters.PerformanceCounter, error)) (string, int) {
	var warning = flag.Float64("warning", 0, "the threshold to issue a warning alert")
	var critical = flag.Float64("critical", 0, "the threshold to issue a critical alert")
	var greaterThan = flag.Bool("greater_than", false, "issue warnings if the metric is greater than the expected thresholds")
	var pollingAttempts = flag.Int("polling_attempts", 2, "the number of times to fetch and average the performance counter")
	var pollingDelay = flag.Int("polling_delay", 1, "the number of seconds to delay between polling attempts")
	var metricName = flag.String("metric_name", "", "the name of the metric generated by this check")
	var counterName = flag.String("counter_name", "", "the name of the performance counter to check")
	flag.Parse()
	SetDefaultGlogStderr()

	var msg string
	var retcode int
	var counter perfcounters.PerformanceCounter
	var err error

	if perfCounterHandler == nil {
		err = errors.New("No ReadPerformanceCounter() service")
	} else {
		counter, err = perfCounterHandler(*counterName, *pollingAttempts, *pollingDelay)
	}

	if err == nil {
		if *greaterThan {
			msg, retcode = nagiosformatters.GreaterFormatNagiosCheck(*counterName, counter.Value, *warning, *critical, *metricName)
		} else {
			msg, retcode = nagiosformatters.LesserFormatNagiosCheck(*counterName, counter.Value, *warning, *critical, *metricName)
		}
	} else {
		msg = fmt.Sprintf("%s CRITICAL - %s", *counterName, err)
		retcode = 2
	}

	return msg, retcode
}
